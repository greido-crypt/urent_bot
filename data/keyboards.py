# -*- coding: utf-8 -*-
from datetime import datetime

from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from api import UrentAPI
from api.urent.models import ActivityModel, CardsModel, PaymentProfileModel, OrdersModel, PromoActionsModel, \
    PlusInfoModel
from db.models import Users, Accounts, Rides, Cards
from settings import HELP_URL, HELP_TG


def generate_go_to_support_kb() -> InlineKeyboardMarkup:
    help_menu = InlineKeyboardBuilder()
    help_menu.row(InlineKeyboardButton(text='üü£ –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–ø–ø–æ—Ä—Ç—É', url=HELP_TG))
    return help_menu.as_markup()


def generate_help_kb() -> InlineKeyboardMarkup:
    help_menu = InlineKeyboardBuilder()
    help_menu.row(InlineKeyboardButton(text='üí¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url=HELP_URL))
    help_menu.row(InlineKeyboardButton(text='üü£ –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–ø–ø–æ—Ä—Ç—É', url=HELP_TG))
    return help_menu.as_markup()


def generate_admin_menu_kb() -> InlineKeyboardMarkup:
    admin_menu = InlineKeyboardBuilder()
    admin_menu.row(InlineKeyboardButton(text='üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º', callback_data='account_management'))
    admin_menu.row(InlineKeyboardButton(text='üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π', callback_data='card_management'))
    admin_menu.row(InlineKeyboardButton(text='üëΩ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', callback_data='user_management'))
    admin_menu.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="cancel"))
    return admin_menu.as_markup()


def generate_main_menu_kb() -> ReplyKeyboardMarkup:
    MAIN_MENU = ReplyKeyboardBuilder()
    MAIN_MENU.row(KeyboardButton(text='üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏–∫'))
    MAIN_MENU.row(KeyboardButton(text='‚ÑπÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'))
    MAIN_MENU.row(KeyboardButton(text='üí¨ –ü–æ–º–æ—â—å'))
    MAIN_MENU.row(KeyboardButton(text='üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫'))
    return MAIN_MENU.as_markup(resize_keyboard=True)


def generate_inline_main_menu() -> InlineKeyboardMarkup:
    MAIN_MENU = InlineKeyboardBuilder()
    MAIN_MENU.row(InlineKeyboardButton(text='üí¨ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', url=HELP_URL))
    return MAIN_MENU.as_markup()


def generate_personal_area_kb() -> InlineKeyboardMarkup:
    personal_area_kb = InlineKeyboardBuilder()
    personal_area_kb.row(
        InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π", callback_data="history_paginator:send_menu:1"))
    personal_area_kb.row(InlineKeyboardButton(text="üì± –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="account_paginator:send_menu:1"))
    personal_area_kb.row(InlineKeyboardButton(text='üí≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã', callback_data="cards_paginator:send_menu:1"))
    return personal_area_kb.as_markup()


def generate_cancel_kb() -> InlineKeyboardMarkup:
    CANCEL_KEYBOARD = InlineKeyboardBuilder()
    CANCEL_KEYBOARD.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="cancel"))
    return CANCEL_KEYBOARD.as_markup()


def generate_get_account_kb_by_id(account_id: int) -> InlineKeyboardMarkup:
    """
    _id: account id from Account class
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='‚Ü™Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É',
                                      callback_data=f'get_account:{account_id}'))
    return keyboard.as_markup()


def generate_delete_account_kb(account_id: int) -> InlineKeyboardMarkup:
    kb_delete_to_acc = InlineKeyboardBuilder()
    kb_delete_to_acc.add(InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                                              callback_data=f'accept_remove_acc:{account_id}'))
    kb_delete_to_acc.add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                                              callback_data=f'get_account:{account_id}'))
    return kb_delete_to_acc.as_markup()


def generate_back_to_account_kb(account_id: int | str) -> InlineKeyboardMarkup:
    kb_back_to_acc = InlineKeyboardBuilder()
    kb_back_to_acc.add(InlineKeyboardButton(text='‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                            callback_data=f"get_account:{account_id}"))
    return kb_back_to_acc.as_markup()


def generate_account_kb(account_data: Accounts,
                        activity_info: ActivityModel.Activity,
                        cards_info: CardsModel.Cards,
                        payment_profile: PaymentProfileModel.PaymentProfile,
                        promo_actions: PromoActionsModel.PromoActions,
                        ride: Rides,
                        plus_info: 'PlusInfoModel.PlusInfo',
                        admin_keyboard=False,
                        ) -> tuple[InlineKeyboardMarkup, str]:
    account_menu = InlineKeyboardBuilder()
    if cards_info.entries and not activity_info.activities:
        account_menu.row(InlineKeyboardButton(text='‚ö°Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É', callback_data=f"start_drive:{account_data.id}"))

    if cards_info.entries and activity_info.activities and activity_info.activities[0].status == 'Booking':
        account_menu.row(InlineKeyboardButton(text="üîî –ü–æ–∏—Å–∫ —Å–∞–º–æ–∫–∞—Ç–∞", callback_data=f"find_scooter:{account_data.id}"))
        account_menu.row(
            InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å —Å–∞–º–æ–∫–∞—Ç–∞", callback_data=f"booking_cancel:{account_data.id}"))

    if activity_info.activities and activity_info.activities[0].status in ['Ordered', "Closing", "Waiting"]:
        account_menu.row(
            InlineKeyboardButton(text='‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É', callback_data=f"stop_drive:{account_data.id}"))

        if activity_info.activities[0].status == 'Waiting':
            account_menu.row(
                InlineKeyboardButton(text='‚ñ∂Ô∏è –°–Ω—è—Ç—å —Å –ø–∞—É–∑—ã', callback_data=f"remove_pause_drive:{account_data.id}"))

        if activity_info.activities[0].status == 'Ordered':
            account_menu.row(
                InlineKeyboardButton(text='‚è∏ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É', callback_data=f"pause_drive:{account_data.id}"))


    if not activity_info.activities and not cards_info.entries:
        account_menu.row(InlineKeyboardButton(text='üí≥ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É', callback_data=f"select_card:{account_data.id}"))

    if not activity_info.activities and cards_info.entries:
        account_menu.row(InlineKeyboardButton(text='üí≥ –û—Ç–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—ã', callback_data=f"remove_cards:{account_data.id}"))

    if not activity_info.activities:
        account_menu.row(
            InlineKeyboardButton(text="üïí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫", callback_data=f"history_rides:{account_data.id}"))

    if not activity_info.activities and not plus_info.entries and account_data.ya_token:
        account_menu.row(InlineKeyboardButton(text='üî• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç üî•',
                                              callback_data=f"activate_free_start:{account_data.id}"))

    # if cards_info.entries and not activity_info.activities:
    #     account_menu.row(InlineKeyboardButton(text='üß∑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
    #                                           callback_data=f"activate_promo_code:{account_data.id}"))

    account_menu.row(InlineKeyboardButton(text='‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è', callback_data=f"get_account:{account_data.id}"))

    if not cards_info.entries and not activity_info.activities:
        account_menu.row(InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'remove_acc:{account_data.id}'))

    if admin_keyboard:
        if account_data.is_deleted:
            account_menu.row(
                InlineKeyboardButton(text='‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'recover_account:{account_data.id}'))

        if account_data.user_id:
            account_menu.row(
                InlineKeyboardButton(text='‚ôæ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'reset_activation:{account_data.id}'))

    account_menu.row(
        InlineKeyboardButton(text='‚Ü™Ô∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data=f"account_paginator:send_menu:1"))

    account_menu_text = f'<b>üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{account_data.phone_number}</code></b>\n' \
                        f'<b>üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: <code>{account_data.coupon}</code></b>\n'

    if activity_info.activities:
        account_menu_text += f'<b>üõ¥ –ù–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç–∞: <code>{activity_info.activities[0].bikeIdentifier}</code></b>\n'
        account_menu_text += f'<b>üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∞: <code>{account_data.fake_points}</code></b>\n'
        account_menu_text += f'<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏, —Å —É—á–µ—Ç–æ–º —Å—É–º–º—ã –∑–∞ —Å—Ç–∞—Ä—Ç: <code>{activity_info.activities[0].bonusWithdrawnMoney.valueFormattedWithoutZero}</code></b>\n'
        account_menu_text += f'<b>üîã –ó–∞—Ä—è–¥ —Å–∞–º–æ–∫–∞—Ç–∞: <code>{int(float(activity_info.activities[0].charge.batteryPercent) * 100)}%</code></b>\n'

    last_purchase_date = payment_profile.lastPurchase.dateTimeUtc

    if last_purchase_date:
        date_obj = datetime.fromisoformat(last_purchase_date.replace("Z", "+00:00"))
        last_purchase_date = date_obj.strftime("%d/%m/%Y, %H:%M:%S")

    if not activity_info.activities and account_data.account_functionality in [1, 2]:
        account_menu_text += f'<b>üü£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: <code>{payment_profile.bonuses.value}</code></b>\n'

    if not activity_info.activities and account_data.account_functionality in [0, 2]:
        account_menu_text += '<b>üü£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–µ:\n</b>'
        if any(account_data.promo_code == promo_code_data.code for promo_code_data in payment_profile.promoCodes) and not promo_actions.entries:
            account_menu_text += f"     ‚îî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–µ–∑–¥–æ–∫ —Å–æ —Å–∫–∏–¥–∫–æ–π: <code>{0}</code></b>\n"

        elif promo_actions.entries:
            account_menu_text += f"     ‚îî <b>–°–∫–∏–¥–∫–∞: <code>{promo_actions.entries[0].discountPercentage}%</code></b>\n"
            account_menu_text += f"     ‚îî <b>–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–∫–∏: <code>{promo_actions.entries[0].unusedAmount.value}</code></b>\n"
            account_menu_text += f"     ‚îî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–µ–∑–¥–æ–∫ —Å–æ —Å–∫–∏–¥–∫–æ–π: <code>{promo_actions.entries[0].unusedTrips}</code></b>\n"

        else:
            account_menu_text += f"     ‚îî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–µ–∑–¥–æ–∫ —Å–æ —Å–∫–∏–¥–∫–æ–π: <code>{account_data.fake_free_rides}</code></b>\n"

    # registration_date = account_data.creation_date.strftime("%d/%m/%Y, %H:%M:%S")
    if not activity_info.activities:
        account_menu_text += (
        f'<b>üí≥ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: <i>{"–ù–µ—Ç" if not cards_info.entries else cards_info.entries[0].cardNumber}</i></b>\n'
        f'<b>üìù –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <i>{last_purchase_date} | {payment_profile.lastPurchase.amount.valueFormatted if payment_profile.lastPurchase.amount is not None else None}</i></b>\n'
        # f'<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: <i>{registration_date}</i></b>\n'
        # f'<b><a href="https://teletype.in/@shadow1ch/mts_premium">üéµ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?</a>'
        f'</b>\n')

    if ride and datetime.utcnow() < ride.finished_time:
        end_date = ride.finished_time.strftime("%d/%m/%Y, %H:%M:%S")
        account_menu_text += f'<b>üèÅ –ü–æ–µ–∑–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è: <i>{end_date}</i></b>\n'

    if activity_info.activities:
        account_menu_text += f'<b><i>‚ÑπÔ∏è –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–û–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è"</i></b>'

    return account_menu.as_markup(), account_menu_text


def generate_payment_kb(payment_url: str,
                        account_id: str | int,
                        card_id: int | None,
                        payment_service: str,
                        web_app=False) -> tuple[InlineKeyboardMarkup, str]:
    """
    payment_service: mir_pay or yoomoney, ecom_pay
    """
    payment_kb = InlineKeyboardBuilder()
    if web_app:
        payment_kb.row(InlineKeyboardButton(text='üíµ –û–ø–ª–∞—Ç–∞', web_app=WebAppInfo(url=payment_url)))
    else:
        payment_kb.row(InlineKeyboardButton(text='üíµ –û–ø–ª–∞—Ç–∞', url=payment_url))

    payment_kb.row(InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                        callback_data=f'check_payment:{account_id}:{payment_service}:{card_id}'))

    # payment_kb.row(InlineKeyboardButton(text='‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'get_account:{__account_id}'))

    return payment_kb.as_markup(), ('<b>üü£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É:</b>')


def generate_payment_service_kb(
        android_payment_url: str,
        ios_payment_url: str,
        account_id: str | int,
        card_id: str | int | None,
        payment_service: str,
) -> tuple[InlineKeyboardMarkup, str]:
    payment_kb, kb_text = InlineKeyboardBuilder(), '<b>üü£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É:</b>\n\n'
    payment_kb.row(InlineKeyboardButton(text='üëΩ Android', url=android_payment_url))
    payment_kb.row(InlineKeyboardButton(text='üçè IOS', url=ios_payment_url))

    payment_kb.row(InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                        callback_data=f'check_payment:{account_id}:{payment_service}:{card_id}'))

    # payment_kb.row(InlineKeyboardButton(text='‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'get_account:{account_id}'))

    if payment_service == 'sber_pay':
        kb_text += ('<b>‚ö†Ô∏è –ï—Å–ª–∏ —É –≤–∞—Å <u>SberKids</u>, –¥–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å ‚ö†Ô∏è\n'
                    '‚ö†Ô∏è –ï—Å–ª–∏ —É –≤–∞—Å <u>IOS</u> - –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä <u>Safari</u> ‚ö†Ô∏è</b>')

    elif payment_service == 'tinkoff_pay':
        kb_text += '<b>‚ö†Ô∏è –ï—Å–ª–∏ —É –≤–∞—Å <u>IOS</u> - –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä <u>Safari</u></b> ‚ö†Ô∏è'

    return payment_kb.as_markup(), kb_text


async def generate_trip_html(trip: OrdersModel.Entry, urent_api: UrentAPI):
    trip_index = trip.id
    start_date_time = trip.startDateTimeUtc
    end_date_time = trip.endDateTimeUtc
    bike_identifier = trip.bikeIdentifier
    costcard = trip.personalWithdrawnMoney.valueFormatted
    cost = trip.summaryWithdrawn.valueFormatted
    rate_name = trip.rateName
    amountdrive = trip.withdrawal.withdrawals[2].amount.valueFormatted
    rate_value = trip.rate.valueFormatted
    activation_cost = trip.activation.valueFormatted
    elapsed_seconds = trip.statistics.elapsedSeconds
    insurance_cost = trip.insurance.valueFormatted
    bonus_cost = trip.bonusWithdrawnMoney.valueFormatted
    track = trip.track
    startBikeLocationLat = trip.startBikeLocation.lat
    startBikeLocationLng = trip.startBikeLocation.lng
    download_receipt = await urent_api.get_ride_payment_info(ride_id=trip.id)
    if download_receipt.receipts:
        download_receipt = download_receipt.receipts[0]
    else:
        download_receipt = "Fail"
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatted_start_date_time = format_date(start_date_time)
    formatted_end_date_time = format_date(end_date_time)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"
    elapsed_hours = int(elapsed_seconds // 60)
    elapsed_minutes = int(elapsed_seconds % 60)
    formatted_elapsed_time = f"{elapsed_hours:02}:{elapsed_minutes:02}"
    coordinates = []
    for point in track:
        coordinates.append([point.lng, point.lat])
    trip_html = f"""
    <div class="trip">
        <div class="trip-button">
            <div class="map-container" style="border-radius: 10px; overflow: hidden; margin-bottom: 20px;">
                <div id="map-container-{trip_index}" style="height: 250px;"></div>
                <script src="https://mapgl.2gis.com/api/js/v1"></script>
                <script>
                    const map{trip_index} = new mapgl.Map('map-container-{trip_index}', {{
                        center: [{startBikeLocationLng}, {startBikeLocationLat}], // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
                        zoom: 15, // –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã
                        key: '82de0e80-2b53-4d04-b5e8-065a25ccab00', // –≤–∞—à –∫–ª—é—á API
                        style: 'c080bb6a-8134-4993-93a1-5b4d8c36a59b' // —Å—Ç–∏–ª—å –∫–∞—Ä—Ç—ã
                    }});
                    const polyline{trip_index} = new mapgl.Polyline(map{trip_index}, {{
                        coordinates: 
                            {coordinates},
                        width: 10,
                        color: '#6a5acd',
                    }});
                </script>
            </div>
            <button class="trip-button" onclick="toggleDetails(this)">
                <div class="trip-summary">
                    <img src="https://www.svgrepo.com/show/104543/micro-scooter.svg" alt="Scooter Icon" class="scooter-icon">
                    <div class="trip-info">
                        <div class="trip-date">{formatted_start_date_time}</div>
                        <div class="trip-id">{bike_identifier}</div>
                    </div>
                    <div class="trip-cost">{cost}</div>
                </div>
            </button>
            <div class="trip-details" style="display: none;">
                <div class="info-section">
                    <div class="info-header">–ü–æ–µ–∑–¥–∫–∞</div>
                    <div class="info-row">
                        <div class="info-label">–°—Ç–∞—Ä—Ç</div>
                        <div class="info-value">{formatted_start_date_time.split()[4]}</div>
                    </div>
                    <div class="info-row">
                        <div class="info-label">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ</div>
                        <div class="info-value">{formatted_end_date_time.split()[4]}</div>
                    </div>
                    <div class="info-row">
                        <div class="info-label">–í –ø—É—Ç–∏</div>
                        <div class="info-value">{formatted_elapsed_time}</div>
                    </div>
                    <hr class="info-divider">
                </div>
                <div class="cost-section">
                    <div class="info-header">–°—Ç–æ–∏–º–æ—Å—Ç—å</div>
                    <div class="cost-row">
                        <div class="cost-label">–¢–∞—Ä–∏—Ñ (–ü–æ–º–∏–Ω—É—Ç–Ω—ã–π)</div>
                        <div class="cost-value"></div>
                        <div class="cost-right">{rate_value}</div>
                    </div>
                    <div class="cost-row">
                        <div class="cost-label">–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–∞—Ä—Ç–∞</div>
                        <div class="cost-value"></div>
                        <div class="cost-right">{activation_cost}</div>
                    </div>
                    <div class="cost-row">
                        <div class="cost-label">–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏</div>
                        <div class="cost-value"></div>
                        <div class="cost-right">{amountdrive}</div>
                    </div>
                    <div class="cost-row">
                    </div>
                    <div class="cost-row">
                        <div class="cost-label-itog">–ò—Ç–æ–≥–æ</div>
                        <div class="cost-value"></div>
                        <div class="cost-right-itog">{cost}</div>
                    </div>
                    <hr class="cost-divider">
                    <div class="cost-row">
                        <div class="cost-label">–û–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–∞–º–∏</div>
                        <div class="cost-value"></div>
                        <div class="cost-right">{bonus_cost}</div>
                    </div>
                    <div class="cost-row">
                        <div class="cost-label">–û–ø–ª–∞—á–µ–Ω–æ –∫–∞—Ä—Ç–æ–π</div>
                        <div class="cost-value"></div>
                        <div class="cost-right">{costcard}</div>
                    </div>
                    <hr class="cost-divider">
                </div>
            <div style="text-align: center; margin-top: 20px;"> <!-- –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è -->
                <a class="download-button" href="#" onclick="downloadReceipt('{download_receipt}')">–°–∫–∞—á–∞—Ç—å —á–µ–∫</a>
            </div>
            </div>
        </div>
    </div>
    <script>
        function downloadReceipt(check) {{
            if (check === 'Fail') {{
            }} else {{
                window.open(check, '_blank');
            }}
        }}
    </script>
    """
    return trip_html


async def generate_html_page(all_receipts: list[OrdersModel.Entry], urent_api: UrentAPI):
    trips_html = []
    for index, trip in enumerate(all_receipts):
        trip_html = await generate_trip_html(trip, urent_api)
        trips_html.append(trip_html)
    all_trips_html = '\n'.join(trips_html)

    html_content = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Trips History</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f7f7f7;
            }}
            .container {{
                max-width: 800px;
                margin: 20px auto;
                padding: 20px;
                background-color: #fff;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }}
            .trip {{
                display: flex;
                align-items: center;
                justify-content: space-between;
                border-bottom: 1px solid #ccc;
                padding: 10px 0;
            }}
            .trip-button {{
                border: none;
                background-color: #fff;
                color: #000;
                cursor: pointer;
                outline: none;
                width: 100%;
                text-align: left;
                padding: 10px 20px;
                border-radius: 20px;
                box-shadow: 0 5px 5px rgba(0, 0, 0, 0.1);
                transition: background-color 0.3s;
                -webkit-tap-highlight-color: transparent;
            }}
            .trip-button:hover {{
                background-color: #f0f0f0;
            }}
            .trip-button:hover .trip-summary {{
                background-color: transparent;
            }}
            .trip-summary {{
                display: flex;
                align-items: center;
                justify-content: space-between;
                width: 100%;
            }}
            .scooter-icon {{
                width: 20px;
                height: 20px;
                margin-right: 10px;
            }}
            .trip-info {{
                margin-right: 20px;
            }}
            .trip-date {{
                font-size: 18px;
                font-weight: bold;
            }}
            .trip-id {{
                font-size: 16px;
                margin-top: 5px;
            }}
            .trip-cost {{
                font-size: 20px;
                font-weight: bold;
                white-space: nowrap;
            }}
            .trip-details {{
                display: none;
                width: 100%;
                margin-top: 10px;
                margin-left: -10px;
                padding: 10px;
                border-radius: 10px;
                box-shadow: 0 5px 5px rgba(0, 0, 0, 0.1);
                background-color: #f7f7f7;
            }}
            .trip-details .info-section {{
                margin-bottom: 20px;
            }}
            .info-header {{
                font-size: 18px;
                font-weight: bold;
                margin-bottom: 10px;
            }}
            .info-row, .cost-row {{
                display: flex;
                justify-content: space-between;
                margin-bottom: 5px;
            }}
            .info-divider, .cost-divider {{
                border: none;
                border-top: 1px solid #ccc;
                margin: 10px 0;
            }}
            .info-label, .cost-label, .info-value, .cost-value, .cost-right {{
                font-size: 15px;
            }}

            .info-label-itog, .cost-label-itog {{
                font-size: 16px;
                font-weight: bold;
                margin-bottom: 10px;
            }}
            .cost-right {{
                text-align: right;
            }}
            .cost-right-itog {{
                font-weight: bold;
                text-align: right;
            }}
            .download-button {{
                border: 2px solid #6a5acd;
                background-color: #ffffff;
                color: #6a5acd;
                cursor: pointer;
                outline: none;
                padding: 10px 20px;
                border-radius: 15px;
                font-size: 16px;
                transition: background-color 0.3s, color 0.3s, border-color 0.3s;
                display: inline-block;
                text-decoration: none;
            }}
            .download-button:hover {{
                background-color: #6a5acd; /* –§–æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
                color: #ffffff; /* –¢–µ–∫—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–µ–ª—ã–º –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
                border-color: #6a5acd; /* –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
            }}
        </style>
        <script>
    function toggleDetails(button) {{
        var details = button.parentElement.querySelector('.trip-details');
        details.style.display = details.style.display === 'none' ? 'block' : 'none';
    }}
</script>

    </head>
    <body>
        <div class="container">
            <h1>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫</h1>
            {all_trips_html}
        </div>
    </body>
    </html>
    """
    return html_content


def format_date(date_str: str):
    from datetime import datetime
    months = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è",
              "–¥–µ–∫–∞–±—Ä—è"]
    date_parts = date_str.split("T")[0].split("-")
    year = date_parts[0]
    month = months[int(date_parts[1]) - 1]
    day = date_parts[2]
    time_str = date_str.split("T")[1]
    time_str: str = time_str.split('.')[0]
    time = datetime.strptime(time_str, "%H:%M:%S")

    return f"{day} {month} {year} –≥. {time.strftime('%H:%M')}"


def generate_history_url(link_url: str, account_id: str | int):
    HISTORY_KEYBOARD = InlineKeyboardBuilder()
    HISTORY_KEYBOARD.row(InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫", web_app=WebAppInfo(url=link_url)))
    HISTORY_KEYBOARD.row(InlineKeyboardButton(text='‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                              callback_data=f"get_account:{account_id}"))
    return HISTORY_KEYBOARD.as_markup()
