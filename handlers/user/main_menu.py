import datetime
import random
from operator import attrgetter

from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import CallbackQuery, Message
from loguru import logger

from data import generate_personal_area_kb, generate_get_account_kb_by_id, generate_main_menu_kb, \
    generate_cancel_kb, generate_help_kb
from data.keyboards import generate_inline_main_menu
from db.models import Presents
from settings import STICKER_ID,  CHANNEL_ID
from db.repository import account_repository, presents_repository
from db.repository import user_repository
from loader import UserStates

keyboard_router = Router(name='keyboard_router')


@keyboard_router.message(Command('start'), any_state)
async def get_text_messages(message: Message, state: FSMContext):
    await state.clear()
    await message.answer_sticker(random.choice(STICKER_ID))
    await message.answer(
        f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
        f"üõ¥üí® –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ! üéâ\n"
        "–ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ —Å–∞–º–æ–∫–∞—Ç–µ —Å –Ω–∞–º–∏ —Å–µ–≥–æ–¥–Ω—è? üåü‚ú®</b>",
        reply_markup=generate_inline_main_menu())
    await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>', reply_markup=generate_main_menu_kb())


@keyboard_router.message(F.text == 'üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏–∫')
async def enter_key(message: Message, state: FSMContext):
    cancel_message = await message.reply(
        f"<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Ç–µ—Ä–∏ –±–∞–ª–ª–æ–≤ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n"
        f"‚ùó –ê–∫—Ç–∏–≤–∏—Ä—É—è –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±–∞–ª–ª—ã –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n\n"
        f"–ï—Å–ª–∏ <u>–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö</u> - –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –≤ –±–æ—Ç–µ üòò</b>",
        reply_markup=generate_cancel_kb())
    await state.update_data(cancel_message=cancel_message)
    await state.set_state(UserStates.input_key)


@keyboard_router.message(F.text == 'üí¨ –ü–æ–º–æ—â—å')
@keyboard_router.message(Command('help'))
async def help_answer(message: Message):
    await message.answer(text='<b>üíú –ú–µ–Ω—é –ø–æ–º–æ—â–∏:</b>', reply_markup=generate_help_kb())


@keyboard_router.message(UserStates.input_key)
async def input_key(message: Message, state: FSMContext, bot: Bot):
    cancel_message: Message = (await state.get_data())['cancel_message']
    await state.clear()
    coupon = message.text
    tg_user_id = message.from_user.id
    account_data = await account_repository.getAccountByCoupon(coupon=coupon)
    if account_data and account_data.user_id is None:
        await account_repository.updateAccountUserId(account_data.id, user_id=tg_user_id)
        await message.answer('<b>‚úÖ –ö–ª—é—á –ø–æ–¥–æ—à—ë–ª üòâ\n'
                             'üìù –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!</b>',
                             reply_markup=generate_get_account_kb_by_id(account_data.id))
        await cancel_message.edit_reply_markup()
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=f"<b>üíú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                 f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á <code>{coupon}</code></b>")
    else:
        await message.answer(f"<b>‚ùå –ö–ª—é—á –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üò•</b>")


@keyboard_router.callback_query(F.data == 'back_to_personal_area')
@keyboard_router.message(F.text == '‚ÑπÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def personal_area(event: CallbackQuery | Message):
    tg_user_id = event.from_user.id
    accounts_deleted = await account_repository.getAccountsByUserId(user_id=tg_user_id, is_deleted=True)
    accounts_not_deleted = await account_repository.getAccountsByUserId(user_id=tg_user_id)
    number_of_purchases = len(accounts_deleted) + len(accounts_not_deleted)
    user_data = await user_repository.get_user_by_tg_id(user_id=tg_user_id)
    registration_date = user_data.creation_date.strftime('%Y-%m-%d %H:%M:%S')
    message_text = f'<b>üíú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{event.from_user.username}\n' \
                   f'üîë –í–∞—à Id: <code>{tg_user_id}</code>\n' \
                   f'üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {number_of_purchases}\n' \
                   f'üìã –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}</b>'

    if isinstance(event, CallbackQuery):
        await event.message.edit_text(message_text, reply_markup=generate_personal_area_kb())
    else:
        await event.answer(message_text, reply_markup=generate_personal_area_kb())


@keyboard_router.message(F.text == 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫', any_state)
async def getPresent(message: Message):
    presents = await presents_repository.getPresentsByUserId(user_id=message.from_user.id)
    if presents:
        presents = sorted(presents, key=attrgetter('upd_date'), reverse=True)
        print(presents[0].upd_date.day, datetime.datetime.day, presents[0].upd_date.day == datetime.datetime.day)
        if presents[0].upd_date.day == datetime.datetime.day:
            return await message.answer('<b>–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ –ø–æ–¥–∞—Ä–∫–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ‚ú®</b>')

    presents = await presents_repository.getPresents(is_active=False)
    if not presents:
        return await message.answer('<b>–ü–æ–¥–∞—Ä–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ –Ω–∏–º–∏ —á—É—Ç—å –ø–æ–∑–∂–µ üò¢</b>')

    present: Presents = random.choice(presents)

    await account_repository.updateAccountUserId(account_id=present.account_id, user_id=message.from_user.id)
    await presents_repository.updatePresentUserIdByPresentId(present_id=present.id, user_id=message.from_user.id)
    await message.answer('<b>üìù –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!</b>',
                         reply_markup=generate_get_account_kb_by_id(present.account_id))


@keyboard_router.callback_query(F.data == 'cancel')
async def cancel_callback_query(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(text='<b>–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>')


@keyboard_router.message()
async def any_messages(message: Message):
    await message.reply(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üò•\n"
                        f"–ù–∞–ø–∏—à–∏—Ç–µ <b>/start</b> –∏–ª–∏ <b>/help</b>", reply_markup=generate_main_menu_kb())

